// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

static const float PI = 3.14159265f;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> skyboxTexture;
SamplerState sampler_skyboxTexture;

float4x4 cameraToWorld;
float4x4 cameraInverseProjection;

struct Ray {
	float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
	Ray ray;
	ray.origin = origin;
    ray.direction = direction;
	return ray;
}

Ray CreateCameraRay(float2 uv) {
	// Transform camera origin to world space
	float3 origin = mul(cameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
    float3 direction = mul(cameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

	// Transform the direction from camera to world space and normalize
    direction = mul(cameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

	// Transform pixel to [-1, 1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

	// Create the ray;
    Ray ray = CreateCameraRay(uv);

    float theta = acos(ray.direction.y) / -PI;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;

    Result[id.xy] = skyboxTexture.SampleLevel(sampler_skyboxTexture, float2(phi, theta), 0);

}